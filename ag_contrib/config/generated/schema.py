# generated by datamodel-codegen:
#   filename:  schema.yml
#   timestamp: 2024-01-18T16:31:09+00:00

from __future__ import annotations

from collections.abc import Mapping, Sequence
from datetime import datetime, time
from enum import Enum
from typing import Annotated, Any

from pydantic import BaseModel, EmailStr, Field


class User(BaseModel):
    pk: int | None
    username: Annotated[
        EmailStr | None,
        Field(
            description='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.'
        ),
    ]
    first_name: Annotated[str | None, Field(description='')]
    last_name: Annotated[str | None, Field(description='')]
    is_superuser: Annotated[
        bool | None,
        Field(
            description='Designates that this user has all permissions without explicitly assigning them.'
        ),
    ]


class Semester(Enum):
    Fall = 'Fall'
    Winter = 'Winter'
    Spring = 'Spring'
    Summer = 'Summer'


class Course(BaseModel):
    pk: int | None
    name: Annotated[
        str | None,
        Field(
            description='The name of this course. Must be unique, non-empty and non-null.'
        ),
    ]
    semester: Annotated[Semester | None, Field(description='')]
    year: Annotated[int | None, Field(description='')]
    subtitle: Annotated[
        str | None, Field(description='An optional descriptive name for the course.')
    ]
    num_late_days: Annotated[
        int | None,
        Field(
            description="The number of late days to give to users submitting to this course's projects."
        ),
    ]
    allowed_guest_domain: Annotated[
        str | None,
        Field(
            description="When non-empty, indicates that guest users' usernames\n                     must end with this string for them to be allowed access\n                     to projects that allow guests.\n                     When empty, indicates that all guests can access projects\n                     in this course where guests are allowed access."
        ),
    ]
    last_modified: Annotated[datetime | None, Field(description='')]


class SubmissionLimitResetTimezone(Enum):
    Africa_Abidjan = 'Africa/Abidjan'
    Africa_Accra = 'Africa/Accra'
    Africa_Addis_Ababa = 'Africa/Addis_Ababa'
    Africa_Algiers = 'Africa/Algiers'
    Africa_Asmara = 'Africa/Asmara'
    Africa_Asmera = 'Africa/Asmera'
    Africa_Bamako = 'Africa/Bamako'
    Africa_Bangui = 'Africa/Bangui'
    Africa_Banjul = 'Africa/Banjul'
    Africa_Bissau = 'Africa/Bissau'
    Africa_Blantyre = 'Africa/Blantyre'
    Africa_Brazzaville = 'Africa/Brazzaville'
    Africa_Bujumbura = 'Africa/Bujumbura'
    Africa_Cairo = 'Africa/Cairo'
    Africa_Casablanca = 'Africa/Casablanca'
    Africa_Ceuta = 'Africa/Ceuta'
    Africa_Conakry = 'Africa/Conakry'
    Africa_Dakar = 'Africa/Dakar'
    Africa_Dar_es_Salaam = 'Africa/Dar_es_Salaam'
    Africa_Djibouti = 'Africa/Djibouti'
    Africa_Douala = 'Africa/Douala'
    Africa_El_Aaiun = 'Africa/El_Aaiun'
    Africa_Freetown = 'Africa/Freetown'
    Africa_Gaborone = 'Africa/Gaborone'
    Africa_Harare = 'Africa/Harare'
    Africa_Johannesburg = 'Africa/Johannesburg'
    Africa_Juba = 'Africa/Juba'
    Africa_Kampala = 'Africa/Kampala'
    Africa_Khartoum = 'Africa/Khartoum'
    Africa_Kigali = 'Africa/Kigali'
    Africa_Kinshasa = 'Africa/Kinshasa'
    Africa_Lagos = 'Africa/Lagos'
    Africa_Libreville = 'Africa/Libreville'
    Africa_Lome = 'Africa/Lome'
    Africa_Luanda = 'Africa/Luanda'
    Africa_Lubumbashi = 'Africa/Lubumbashi'
    Africa_Lusaka = 'Africa/Lusaka'
    Africa_Malabo = 'Africa/Malabo'
    Africa_Maputo = 'Africa/Maputo'
    Africa_Maseru = 'Africa/Maseru'
    Africa_Mbabane = 'Africa/Mbabane'
    Africa_Mogadishu = 'Africa/Mogadishu'
    Africa_Monrovia = 'Africa/Monrovia'
    Africa_Nairobi = 'Africa/Nairobi'
    Africa_Ndjamena = 'Africa/Ndjamena'
    Africa_Niamey = 'Africa/Niamey'
    Africa_Nouakchott = 'Africa/Nouakchott'
    Africa_Ouagadougou = 'Africa/Ouagadougou'
    Africa_Porto_Novo = 'Africa/Porto-Novo'
    Africa_Sao_Tome = 'Africa/Sao_Tome'
    Africa_Timbuktu = 'Africa/Timbuktu'
    Africa_Tripoli = 'Africa/Tripoli'
    Africa_Tunis = 'Africa/Tunis'
    Africa_Windhoek = 'Africa/Windhoek'
    America_Adak = 'America/Adak'
    America_Anchorage = 'America/Anchorage'
    America_Anguilla = 'America/Anguilla'
    America_Antigua = 'America/Antigua'
    America_Araguaina = 'America/Araguaina'
    America_Argentina_Buenos_Aires = 'America/Argentina/Buenos_Aires'
    America_Argentina_Catamarca = 'America/Argentina/Catamarca'
    America_Argentina_ComodRivadavia = 'America/Argentina/ComodRivadavia'
    America_Argentina_Cordoba = 'America/Argentina/Cordoba'
    America_Argentina_Jujuy = 'America/Argentina/Jujuy'
    America_Argentina_La_Rioja = 'America/Argentina/La_Rioja'
    America_Argentina_Mendoza = 'America/Argentina/Mendoza'
    America_Argentina_Rio_Gallegos = 'America/Argentina/Rio_Gallegos'
    America_Argentina_Salta = 'America/Argentina/Salta'
    America_Argentina_San_Juan = 'America/Argentina/San_Juan'
    America_Argentina_San_Luis = 'America/Argentina/San_Luis'
    America_Argentina_Tucuman = 'America/Argentina/Tucuman'
    America_Argentina_Ushuaia = 'America/Argentina/Ushuaia'
    America_Aruba = 'America/Aruba'
    America_Asuncion = 'America/Asuncion'
    America_Atikokan = 'America/Atikokan'
    America_Atka = 'America/Atka'
    America_Bahia = 'America/Bahia'
    America_Bahia_Banderas = 'America/Bahia_Banderas'
    America_Barbados = 'America/Barbados'
    America_Belem = 'America/Belem'
    America_Belize = 'America/Belize'
    America_Blanc_Sablon = 'America/Blanc-Sablon'
    America_Boa_Vista = 'America/Boa_Vista'
    America_Bogota = 'America/Bogota'
    America_Boise = 'America/Boise'
    America_Buenos_Aires = 'America/Buenos_Aires'
    America_Cambridge_Bay = 'America/Cambridge_Bay'
    America_Campo_Grande = 'America/Campo_Grande'
    America_Cancun = 'America/Cancun'
    America_Caracas = 'America/Caracas'
    America_Catamarca = 'America/Catamarca'
    America_Cayenne = 'America/Cayenne'
    America_Cayman = 'America/Cayman'
    America_Chicago = 'America/Chicago'
    America_Chihuahua = 'America/Chihuahua'
    America_Ciudad_Juarez = 'America/Ciudad_Juarez'
    America_Coral_Harbour = 'America/Coral_Harbour'
    America_Cordoba = 'America/Cordoba'
    America_Costa_Rica = 'America/Costa_Rica'
    America_Creston = 'America/Creston'
    America_Cuiaba = 'America/Cuiaba'
    America_Curacao = 'America/Curacao'
    America_Danmarkshavn = 'America/Danmarkshavn'
    America_Dawson = 'America/Dawson'
    America_Dawson_Creek = 'America/Dawson_Creek'
    America_Denver = 'America/Denver'
    America_Detroit = 'America/Detroit'
    America_Dominica = 'America/Dominica'
    America_Edmonton = 'America/Edmonton'
    America_Eirunepe = 'America/Eirunepe'
    America_El_Salvador = 'America/El_Salvador'
    America_Ensenada = 'America/Ensenada'
    America_Fort_Nelson = 'America/Fort_Nelson'
    America_Fort_Wayne = 'America/Fort_Wayne'
    America_Fortaleza = 'America/Fortaleza'
    America_Glace_Bay = 'America/Glace_Bay'
    America_Godthab = 'America/Godthab'
    America_Goose_Bay = 'America/Goose_Bay'
    America_Grand_Turk = 'America/Grand_Turk'
    America_Grenada = 'America/Grenada'
    America_Guadeloupe = 'America/Guadeloupe'
    America_Guatemala = 'America/Guatemala'
    America_Guayaquil = 'America/Guayaquil'
    America_Guyana = 'America/Guyana'
    America_Halifax = 'America/Halifax'
    America_Havana = 'America/Havana'
    America_Hermosillo = 'America/Hermosillo'
    America_Indiana_Indianapolis = 'America/Indiana/Indianapolis'
    America_Indiana_Knox = 'America/Indiana/Knox'
    America_Indiana_Marengo = 'America/Indiana/Marengo'
    America_Indiana_Petersburg = 'America/Indiana/Petersburg'
    America_Indiana_Tell_City = 'America/Indiana/Tell_City'
    America_Indiana_Vevay = 'America/Indiana/Vevay'
    America_Indiana_Vincennes = 'America/Indiana/Vincennes'
    America_Indiana_Winamac = 'America/Indiana/Winamac'
    America_Indianapolis = 'America/Indianapolis'
    America_Inuvik = 'America/Inuvik'
    America_Iqaluit = 'America/Iqaluit'
    America_Jamaica = 'America/Jamaica'
    America_Jujuy = 'America/Jujuy'
    America_Juneau = 'America/Juneau'
    America_Kentucky_Louisville = 'America/Kentucky/Louisville'
    America_Kentucky_Monticello = 'America/Kentucky/Monticello'
    America_Knox_IN = 'America/Knox_IN'
    America_Kralendijk = 'America/Kralendijk'
    America_La_Paz = 'America/La_Paz'
    America_Lima = 'America/Lima'
    America_Los_Angeles = 'America/Los_Angeles'
    America_Louisville = 'America/Louisville'
    America_Lower_Princes = 'America/Lower_Princes'
    America_Maceio = 'America/Maceio'
    America_Managua = 'America/Managua'
    America_Manaus = 'America/Manaus'
    America_Marigot = 'America/Marigot'
    America_Martinique = 'America/Martinique'
    America_Matamoros = 'America/Matamoros'
    America_Mazatlan = 'America/Mazatlan'
    America_Mendoza = 'America/Mendoza'
    America_Menominee = 'America/Menominee'
    America_Merida = 'America/Merida'
    America_Metlakatla = 'America/Metlakatla'
    America_Mexico_City = 'America/Mexico_City'
    America_Miquelon = 'America/Miquelon'
    America_Moncton = 'America/Moncton'
    America_Monterrey = 'America/Monterrey'
    America_Montevideo = 'America/Montevideo'
    America_Montreal = 'America/Montreal'
    America_Montserrat = 'America/Montserrat'
    America_Nassau = 'America/Nassau'
    America_New_York = 'America/New_York'
    America_Nipigon = 'America/Nipigon'
    America_Nome = 'America/Nome'
    America_Noronha = 'America/Noronha'
    America_North_Dakota_Beulah = 'America/North_Dakota/Beulah'
    America_North_Dakota_Center = 'America/North_Dakota/Center'
    America_North_Dakota_New_Salem = 'America/North_Dakota/New_Salem'
    America_Nuuk = 'America/Nuuk'
    America_Ojinaga = 'America/Ojinaga'
    America_Panama = 'America/Panama'
    America_Pangnirtung = 'America/Pangnirtung'
    America_Paramaribo = 'America/Paramaribo'
    America_Phoenix = 'America/Phoenix'
    America_Port_au_Prince = 'America/Port-au-Prince'
    America_Port_of_Spain = 'America/Port_of_Spain'
    America_Porto_Acre = 'America/Porto_Acre'
    America_Porto_Velho = 'America/Porto_Velho'
    America_Puerto_Rico = 'America/Puerto_Rico'
    America_Punta_Arenas = 'America/Punta_Arenas'
    America_Rainy_River = 'America/Rainy_River'
    America_Rankin_Inlet = 'America/Rankin_Inlet'
    America_Recife = 'America/Recife'
    America_Regina = 'America/Regina'
    America_Resolute = 'America/Resolute'
    America_Rio_Branco = 'America/Rio_Branco'
    America_Rosario = 'America/Rosario'
    America_Santa_Isabel = 'America/Santa_Isabel'
    America_Santarem = 'America/Santarem'
    America_Santiago = 'America/Santiago'
    America_Santo_Domingo = 'America/Santo_Domingo'
    America_Sao_Paulo = 'America/Sao_Paulo'
    America_Scoresbysund = 'America/Scoresbysund'
    America_Shiprock = 'America/Shiprock'
    America_Sitka = 'America/Sitka'
    America_St_Barthelemy = 'America/St_Barthelemy'
    America_St_Johns = 'America/St_Johns'
    America_St_Kitts = 'America/St_Kitts'
    America_St_Lucia = 'America/St_Lucia'
    America_St_Thomas = 'America/St_Thomas'
    America_St_Vincent = 'America/St_Vincent'
    America_Swift_Current = 'America/Swift_Current'
    America_Tegucigalpa = 'America/Tegucigalpa'
    America_Thule = 'America/Thule'
    America_Thunder_Bay = 'America/Thunder_Bay'
    America_Tijuana = 'America/Tijuana'
    America_Toronto = 'America/Toronto'
    America_Tortola = 'America/Tortola'
    America_Vancouver = 'America/Vancouver'
    America_Virgin = 'America/Virgin'
    America_Whitehorse = 'America/Whitehorse'
    America_Winnipeg = 'America/Winnipeg'
    America_Yakutat = 'America/Yakutat'
    America_Yellowknife = 'America/Yellowknife'
    Antarctica_Casey = 'Antarctica/Casey'
    Antarctica_Davis = 'Antarctica/Davis'
    Antarctica_DumontDUrville = 'Antarctica/DumontDUrville'
    Antarctica_Macquarie = 'Antarctica/Macquarie'
    Antarctica_Mawson = 'Antarctica/Mawson'
    Antarctica_McMurdo = 'Antarctica/McMurdo'
    Antarctica_Palmer = 'Antarctica/Palmer'
    Antarctica_Rothera = 'Antarctica/Rothera'
    Antarctica_South_Pole = 'Antarctica/South_Pole'
    Antarctica_Syowa = 'Antarctica/Syowa'
    Antarctica_Troll = 'Antarctica/Troll'
    Antarctica_Vostok = 'Antarctica/Vostok'
    Arctic_Longyearbyen = 'Arctic/Longyearbyen'
    Asia_Aden = 'Asia/Aden'
    Asia_Almaty = 'Asia/Almaty'
    Asia_Amman = 'Asia/Amman'
    Asia_Anadyr = 'Asia/Anadyr'
    Asia_Aqtau = 'Asia/Aqtau'
    Asia_Aqtobe = 'Asia/Aqtobe'
    Asia_Ashgabat = 'Asia/Ashgabat'
    Asia_Ashkhabad = 'Asia/Ashkhabad'
    Asia_Atyrau = 'Asia/Atyrau'
    Asia_Baghdad = 'Asia/Baghdad'
    Asia_Bahrain = 'Asia/Bahrain'
    Asia_Baku = 'Asia/Baku'
    Asia_Bangkok = 'Asia/Bangkok'
    Asia_Barnaul = 'Asia/Barnaul'
    Asia_Beirut = 'Asia/Beirut'
    Asia_Bishkek = 'Asia/Bishkek'
    Asia_Brunei = 'Asia/Brunei'
    Asia_Calcutta = 'Asia/Calcutta'
    Asia_Chita = 'Asia/Chita'
    Asia_Choibalsan = 'Asia/Choibalsan'
    Asia_Chongqing = 'Asia/Chongqing'
    Asia_Chungking = 'Asia/Chungking'
    Asia_Colombo = 'Asia/Colombo'
    Asia_Dacca = 'Asia/Dacca'
    Asia_Damascus = 'Asia/Damascus'
    Asia_Dhaka = 'Asia/Dhaka'
    Asia_Dili = 'Asia/Dili'
    Asia_Dubai = 'Asia/Dubai'
    Asia_Dushanbe = 'Asia/Dushanbe'
    Asia_Famagusta = 'Asia/Famagusta'
    Asia_Gaza = 'Asia/Gaza'
    Asia_Hanoi = 'Asia/Hanoi'
    Asia_Harbin = 'Asia/Harbin'
    Asia_Hebron = 'Asia/Hebron'
    Asia_Ho_Chi_Minh = 'Asia/Ho_Chi_Minh'
    Asia_Hong_Kong = 'Asia/Hong_Kong'
    Asia_Hovd = 'Asia/Hovd'
    Asia_Irkutsk = 'Asia/Irkutsk'
    Asia_Istanbul = 'Asia/Istanbul'
    Asia_Jakarta = 'Asia/Jakarta'
    Asia_Jayapura = 'Asia/Jayapura'
    Asia_Jerusalem = 'Asia/Jerusalem'
    Asia_Kabul = 'Asia/Kabul'
    Asia_Kamchatka = 'Asia/Kamchatka'
    Asia_Karachi = 'Asia/Karachi'
    Asia_Kashgar = 'Asia/Kashgar'
    Asia_Kathmandu = 'Asia/Kathmandu'
    Asia_Katmandu = 'Asia/Katmandu'
    Asia_Khandyga = 'Asia/Khandyga'
    Asia_Kolkata = 'Asia/Kolkata'
    Asia_Krasnoyarsk = 'Asia/Krasnoyarsk'
    Asia_Kuala_Lumpur = 'Asia/Kuala_Lumpur'
    Asia_Kuching = 'Asia/Kuching'
    Asia_Kuwait = 'Asia/Kuwait'
    Asia_Macao = 'Asia/Macao'
    Asia_Macau = 'Asia/Macau'
    Asia_Magadan = 'Asia/Magadan'
    Asia_Makassar = 'Asia/Makassar'
    Asia_Manila = 'Asia/Manila'
    Asia_Muscat = 'Asia/Muscat'
    Asia_Nicosia = 'Asia/Nicosia'
    Asia_Novokuznetsk = 'Asia/Novokuznetsk'
    Asia_Novosibirsk = 'Asia/Novosibirsk'
    Asia_Omsk = 'Asia/Omsk'
    Asia_Oral = 'Asia/Oral'
    Asia_Phnom_Penh = 'Asia/Phnom_Penh'
    Asia_Pontianak = 'Asia/Pontianak'
    Asia_Pyongyang = 'Asia/Pyongyang'
    Asia_Qatar = 'Asia/Qatar'
    Asia_Qostanay = 'Asia/Qostanay'
    Asia_Qyzylorda = 'Asia/Qyzylorda'
    Asia_Rangoon = 'Asia/Rangoon'
    Asia_Riyadh = 'Asia/Riyadh'
    Asia_Saigon = 'Asia/Saigon'
    Asia_Sakhalin = 'Asia/Sakhalin'
    Asia_Samarkand = 'Asia/Samarkand'
    Asia_Seoul = 'Asia/Seoul'
    Asia_Shanghai = 'Asia/Shanghai'
    Asia_Singapore = 'Asia/Singapore'
    Asia_Srednekolymsk = 'Asia/Srednekolymsk'
    Asia_Taipei = 'Asia/Taipei'
    Asia_Tashkent = 'Asia/Tashkent'
    Asia_Tbilisi = 'Asia/Tbilisi'
    Asia_Tehran = 'Asia/Tehran'
    Asia_Tel_Aviv = 'Asia/Tel_Aviv'
    Asia_Thimbu = 'Asia/Thimbu'
    Asia_Thimphu = 'Asia/Thimphu'
    Asia_Tokyo = 'Asia/Tokyo'
    Asia_Tomsk = 'Asia/Tomsk'
    Asia_Ujung_Pandang = 'Asia/Ujung_Pandang'
    Asia_Ulaanbaatar = 'Asia/Ulaanbaatar'
    Asia_Ulan_Bator = 'Asia/Ulan_Bator'
    Asia_Urumqi = 'Asia/Urumqi'
    Asia_Ust_Nera = 'Asia/Ust-Nera'
    Asia_Vientiane = 'Asia/Vientiane'
    Asia_Vladivostok = 'Asia/Vladivostok'
    Asia_Yakutsk = 'Asia/Yakutsk'
    Asia_Yangon = 'Asia/Yangon'
    Asia_Yekaterinburg = 'Asia/Yekaterinburg'
    Asia_Yerevan = 'Asia/Yerevan'
    Atlantic_Azores = 'Atlantic/Azores'
    Atlantic_Bermuda = 'Atlantic/Bermuda'
    Atlantic_Canary = 'Atlantic/Canary'
    Atlantic_Cape_Verde = 'Atlantic/Cape_Verde'
    Atlantic_Faeroe = 'Atlantic/Faeroe'
    Atlantic_Faroe = 'Atlantic/Faroe'
    Atlantic_Jan_Mayen = 'Atlantic/Jan_Mayen'
    Atlantic_Madeira = 'Atlantic/Madeira'
    Atlantic_Reykjavik = 'Atlantic/Reykjavik'
    Atlantic_South_Georgia = 'Atlantic/South_Georgia'
    Atlantic_St_Helena = 'Atlantic/St_Helena'
    Atlantic_Stanley = 'Atlantic/Stanley'
    Australia_ACT = 'Australia/ACT'
    Australia_Adelaide = 'Australia/Adelaide'
    Australia_Brisbane = 'Australia/Brisbane'
    Australia_Broken_Hill = 'Australia/Broken_Hill'
    Australia_Canberra = 'Australia/Canberra'
    Australia_Currie = 'Australia/Currie'
    Australia_Darwin = 'Australia/Darwin'
    Australia_Eucla = 'Australia/Eucla'
    Australia_Hobart = 'Australia/Hobart'
    Australia_LHI = 'Australia/LHI'
    Australia_Lindeman = 'Australia/Lindeman'
    Australia_Lord_Howe = 'Australia/Lord_Howe'
    Australia_Melbourne = 'Australia/Melbourne'
    Australia_NSW = 'Australia/NSW'
    Australia_North = 'Australia/North'
    Australia_Perth = 'Australia/Perth'
    Australia_Queensland = 'Australia/Queensland'
    Australia_South = 'Australia/South'
    Australia_Sydney = 'Australia/Sydney'
    Australia_Tasmania = 'Australia/Tasmania'
    Australia_Victoria = 'Australia/Victoria'
    Australia_West = 'Australia/West'
    Australia_Yancowinna = 'Australia/Yancowinna'
    Brazil_Acre = 'Brazil/Acre'
    Brazil_DeNoronha = 'Brazil/DeNoronha'
    Brazil_East = 'Brazil/East'
    Brazil_West = 'Brazil/West'
    CET = 'CET'
    CST6CDT = 'CST6CDT'
    Canada_Atlantic = 'Canada/Atlantic'
    Canada_Central = 'Canada/Central'
    Canada_Eastern = 'Canada/Eastern'
    Canada_Mountain = 'Canada/Mountain'
    Canada_Newfoundland = 'Canada/Newfoundland'
    Canada_Pacific = 'Canada/Pacific'
    Canada_Saskatchewan = 'Canada/Saskatchewan'
    Canada_Yukon = 'Canada/Yukon'
    Chile_Continental = 'Chile/Continental'
    Chile_EasterIsland = 'Chile/EasterIsland'
    Cuba = 'Cuba'
    EET = 'EET'
    EST = 'EST'
    EST5EDT = 'EST5EDT'
    Egypt = 'Egypt'
    Eire = 'Eire'
    Etc_GMT = 'Etc/GMT'
    Etc_GMT_0 = 'Etc/GMT+0'
    Etc_GMT_1 = 'Etc/GMT+1'
    Etc_GMT_10 = 'Etc/GMT+10'
    Etc_GMT_11 = 'Etc/GMT+11'
    Etc_GMT_12 = 'Etc/GMT+12'
    Etc_GMT_2 = 'Etc/GMT+2'
    Etc_GMT_3 = 'Etc/GMT+3'
    Etc_GMT_4 = 'Etc/GMT+4'
    Etc_GMT_5 = 'Etc/GMT+5'
    Etc_GMT_6 = 'Etc/GMT+6'
    Etc_GMT_7 = 'Etc/GMT+7'
    Etc_GMT_8 = 'Etc/GMT+8'
    Etc_GMT_9 = 'Etc/GMT+9'
    Etc_GMT_0_1 = 'Etc/GMT-0'
    Etc_GMT_1_1 = 'Etc/GMT-1'
    Etc_GMT_10_1 = 'Etc/GMT-10'
    Etc_GMT_11_1 = 'Etc/GMT-11'
    Etc_GMT_12_1 = 'Etc/GMT-12'
    Etc_GMT_13 = 'Etc/GMT-13'
    Etc_GMT_14 = 'Etc/GMT-14'
    Etc_GMT_2_1 = 'Etc/GMT-2'
    Etc_GMT_3_1 = 'Etc/GMT-3'
    Etc_GMT_4_1 = 'Etc/GMT-4'
    Etc_GMT_5_1 = 'Etc/GMT-5'
    Etc_GMT_6_1 = 'Etc/GMT-6'
    Etc_GMT_7_1 = 'Etc/GMT-7'
    Etc_GMT_8_1 = 'Etc/GMT-8'
    Etc_GMT_9_1 = 'Etc/GMT-9'
    Etc_GMT0 = 'Etc/GMT0'
    Etc_Greenwich = 'Etc/Greenwich'
    Etc_UCT = 'Etc/UCT'
    Etc_UTC = 'Etc/UTC'
    Etc_Universal = 'Etc/Universal'
    Etc_Zulu = 'Etc/Zulu'
    Europe_Amsterdam = 'Europe/Amsterdam'
    Europe_Andorra = 'Europe/Andorra'
    Europe_Astrakhan = 'Europe/Astrakhan'
    Europe_Athens = 'Europe/Athens'
    Europe_Belfast = 'Europe/Belfast'
    Europe_Belgrade = 'Europe/Belgrade'
    Europe_Berlin = 'Europe/Berlin'
    Europe_Bratislava = 'Europe/Bratislava'
    Europe_Brussels = 'Europe/Brussels'
    Europe_Bucharest = 'Europe/Bucharest'
    Europe_Budapest = 'Europe/Budapest'
    Europe_Busingen = 'Europe/Busingen'
    Europe_Chisinau = 'Europe/Chisinau'
    Europe_Copenhagen = 'Europe/Copenhagen'
    Europe_Dublin = 'Europe/Dublin'
    Europe_Gibraltar = 'Europe/Gibraltar'
    Europe_Guernsey = 'Europe/Guernsey'
    Europe_Helsinki = 'Europe/Helsinki'
    Europe_Isle_of_Man = 'Europe/Isle_of_Man'
    Europe_Istanbul = 'Europe/Istanbul'
    Europe_Jersey = 'Europe/Jersey'
    Europe_Kaliningrad = 'Europe/Kaliningrad'
    Europe_Kiev = 'Europe/Kiev'
    Europe_Kirov = 'Europe/Kirov'
    Europe_Kyiv = 'Europe/Kyiv'
    Europe_Lisbon = 'Europe/Lisbon'
    Europe_Ljubljana = 'Europe/Ljubljana'
    Europe_London = 'Europe/London'
    Europe_Luxembourg = 'Europe/Luxembourg'
    Europe_Madrid = 'Europe/Madrid'
    Europe_Malta = 'Europe/Malta'
    Europe_Mariehamn = 'Europe/Mariehamn'
    Europe_Minsk = 'Europe/Minsk'
    Europe_Monaco = 'Europe/Monaco'
    Europe_Moscow = 'Europe/Moscow'
    Europe_Nicosia = 'Europe/Nicosia'
    Europe_Oslo = 'Europe/Oslo'
    Europe_Paris = 'Europe/Paris'
    Europe_Podgorica = 'Europe/Podgorica'
    Europe_Prague = 'Europe/Prague'
    Europe_Riga = 'Europe/Riga'
    Europe_Rome = 'Europe/Rome'
    Europe_Samara = 'Europe/Samara'
    Europe_San_Marino = 'Europe/San_Marino'
    Europe_Sarajevo = 'Europe/Sarajevo'
    Europe_Saratov = 'Europe/Saratov'
    Europe_Simferopol = 'Europe/Simferopol'
    Europe_Skopje = 'Europe/Skopje'
    Europe_Sofia = 'Europe/Sofia'
    Europe_Stockholm = 'Europe/Stockholm'
    Europe_Tallinn = 'Europe/Tallinn'
    Europe_Tirane = 'Europe/Tirane'
    Europe_Tiraspol = 'Europe/Tiraspol'
    Europe_Ulyanovsk = 'Europe/Ulyanovsk'
    Europe_Uzhgorod = 'Europe/Uzhgorod'
    Europe_Vaduz = 'Europe/Vaduz'
    Europe_Vatican = 'Europe/Vatican'
    Europe_Vienna = 'Europe/Vienna'
    Europe_Vilnius = 'Europe/Vilnius'
    Europe_Volgograd = 'Europe/Volgograd'
    Europe_Warsaw = 'Europe/Warsaw'
    Europe_Zagreb = 'Europe/Zagreb'
    Europe_Zaporozhye = 'Europe/Zaporozhye'
    Europe_Zurich = 'Europe/Zurich'
    Factory = 'Factory'
    GB = 'GB'
    GB_Eire = 'GB-Eire'
    GMT = 'GMT'
    GMT_0 = 'GMT+0'
    GMT_0_1 = 'GMT-0'
    GMT0 = 'GMT0'
    Greenwich = 'Greenwich'
    HST = 'HST'
    Hongkong = 'Hongkong'
    Iceland = 'Iceland'
    Indian_Antananarivo = 'Indian/Antananarivo'
    Indian_Chagos = 'Indian/Chagos'
    Indian_Christmas = 'Indian/Christmas'
    Indian_Cocos = 'Indian/Cocos'
    Indian_Comoro = 'Indian/Comoro'
    Indian_Kerguelen = 'Indian/Kerguelen'
    Indian_Mahe = 'Indian/Mahe'
    Indian_Maldives = 'Indian/Maldives'
    Indian_Mauritius = 'Indian/Mauritius'
    Indian_Mayotte = 'Indian/Mayotte'
    Indian_Reunion = 'Indian/Reunion'
    Iran = 'Iran'
    Israel = 'Israel'
    Jamaica = 'Jamaica'
    Japan = 'Japan'
    Kwajalein = 'Kwajalein'
    Libya = 'Libya'
    MET = 'MET'
    MST = 'MST'
    MST7MDT = 'MST7MDT'
    Mexico_BajaNorte = 'Mexico/BajaNorte'
    Mexico_BajaSur = 'Mexico/BajaSur'
    Mexico_General = 'Mexico/General'
    NZ = 'NZ'
    NZ_CHAT = 'NZ-CHAT'
    Navajo = 'Navajo'
    PRC = 'PRC'
    PST8PDT = 'PST8PDT'
    Pacific_Apia = 'Pacific/Apia'
    Pacific_Auckland = 'Pacific/Auckland'
    Pacific_Bougainville = 'Pacific/Bougainville'
    Pacific_Chatham = 'Pacific/Chatham'
    Pacific_Chuuk = 'Pacific/Chuuk'
    Pacific_Easter = 'Pacific/Easter'
    Pacific_Efate = 'Pacific/Efate'
    Pacific_Enderbury = 'Pacific/Enderbury'
    Pacific_Fakaofo = 'Pacific/Fakaofo'
    Pacific_Fiji = 'Pacific/Fiji'
    Pacific_Funafuti = 'Pacific/Funafuti'
    Pacific_Galapagos = 'Pacific/Galapagos'
    Pacific_Gambier = 'Pacific/Gambier'
    Pacific_Guadalcanal = 'Pacific/Guadalcanal'
    Pacific_Guam = 'Pacific/Guam'
    Pacific_Honolulu = 'Pacific/Honolulu'
    Pacific_Johnston = 'Pacific/Johnston'
    Pacific_Kanton = 'Pacific/Kanton'
    Pacific_Kiritimati = 'Pacific/Kiritimati'
    Pacific_Kosrae = 'Pacific/Kosrae'
    Pacific_Kwajalein = 'Pacific/Kwajalein'
    Pacific_Majuro = 'Pacific/Majuro'
    Pacific_Marquesas = 'Pacific/Marquesas'
    Pacific_Midway = 'Pacific/Midway'
    Pacific_Nauru = 'Pacific/Nauru'
    Pacific_Niue = 'Pacific/Niue'
    Pacific_Norfolk = 'Pacific/Norfolk'
    Pacific_Noumea = 'Pacific/Noumea'
    Pacific_Pago_Pago = 'Pacific/Pago_Pago'
    Pacific_Palau = 'Pacific/Palau'
    Pacific_Pitcairn = 'Pacific/Pitcairn'
    Pacific_Pohnpei = 'Pacific/Pohnpei'
    Pacific_Ponape = 'Pacific/Ponape'
    Pacific_Port_Moresby = 'Pacific/Port_Moresby'
    Pacific_Rarotonga = 'Pacific/Rarotonga'
    Pacific_Saipan = 'Pacific/Saipan'
    Pacific_Samoa = 'Pacific/Samoa'
    Pacific_Tahiti = 'Pacific/Tahiti'
    Pacific_Tarawa = 'Pacific/Tarawa'
    Pacific_Tongatapu = 'Pacific/Tongatapu'
    Pacific_Truk = 'Pacific/Truk'
    Pacific_Wake = 'Pacific/Wake'
    Pacific_Wallis = 'Pacific/Wallis'
    Pacific_Yap = 'Pacific/Yap'
    Poland = 'Poland'
    Portugal = 'Portugal'
    ROC = 'ROC'
    ROK = 'ROK'
    Singapore = 'Singapore'
    Turkey = 'Turkey'
    UCT = 'UCT'
    US_Alaska = 'US/Alaska'
    US_Aleutian = 'US/Aleutian'
    US_Arizona = 'US/Arizona'
    US_Central = 'US/Central'
    US_East_Indiana = 'US/East-Indiana'
    US_Eastern = 'US/Eastern'
    US_Hawaii = 'US/Hawaii'
    US_Indiana_Starke = 'US/Indiana-Starke'
    US_Michigan = 'US/Michigan'
    US_Mountain = 'US/Mountain'
    US_Pacific = 'US/Pacific'
    US_Samoa = 'US/Samoa'
    UTC = 'UTC'
    Universal = 'Universal'
    W_SU = 'W-SU'
    WET = 'WET'
    Zulu = 'Zulu'
    localtime = 'localtime'


class UltimateSubmissionPolicy(Enum):
    most_recent = 'most_recent'
    best_basic_score = 'best_basic_score'
    best = 'best'


class ExpectedStudentFile(BaseModel):
    pk: int | None
    project: Annotated[int | None, Field(description='')]
    pattern: Annotated[
        str | None,
        Field(
            description="A shell-style file pattern suitable for\n            use with Python's fnmatch.fnmatch()\n            function (https://docs.python.org/3.5/library/fnmatch.html)\n            This string must be a legal UNIX filename and may not be\n            '..' or '.'.\n            NOTE: Patterns for a given project must not overlap,\n                otherwise the behavior is undefined."
        ),
    ]
    min_num_matches: Annotated[
        int | None,
        Field(
            description='The minimum number of submitted student files that\n            should match the pattern. Must be non-negative.'
        ),
    ]
    max_num_matches: Annotated[
        int | None,
        Field(
            description='The maximum number of submitted student files that\n            can match the pattern. Must be >= min_num_matches'
        ),
    ]
    last_modified: Annotated[datetime | None, Field(description='')]


class InstructorFile(BaseModel):
    pk: int | None
    project: Annotated[int | None, Field(description='')]
    name: Annotated[str | None, Field(description='')]
    last_modified: Annotated[datetime | None, Field(description='')]
    size: Annotated[int | None, Field(description='')]


class DownloadType(Enum):
    all_scores = 'all_scores'
    final_graded_submission_scores = 'final_graded_submission_scores'
    all_submission_files = 'all_submission_files'
    final_graded_submission_files = 'final_graded_submission_files'


class DownloadTask(BaseModel):
    pk: int | None
    project: Annotated[int | None, Field(description='')]
    download_type: Annotated[DownloadType | None, Field(description='')]
    result_filename: Annotated[str | None, Field(description='')]
    progress: Annotated[
        int | None,
        Field(
            description='A percentage indicating how close the task is to completion.'
        ),
    ]
    include_pending_extensions: Annotated[
        bool | None,
        Field(
            description='Applies only to "final_graded_submission_scores" downloads,\n            ignored otherwise. When True, students with pending extensions will be\n            included in final_graded_submission_scores download CSV files.'
        ),
    ]
    error_msg: Annotated[str | None, Field(description='')]
    created_at: Annotated[datetime | None, Field(description='')]


class Group(BaseModel):
    pk: int | None
    project: Annotated[int | None, Field(description='')]
    extended_due_date: Annotated[
        datetime | None,
        Field(
            description='When this field is set, it indicates that members\n            of this submission group can submit until this specified\n            date, overriding the project closing time.\n            Default value: None'
        ),
    ]
    member_names: Annotated[
        Sequence[str] | None,
        Field(
            description='A list of usernames of the group members, sorted alphabetically.'
        ),
    ]
    members: Annotated[
        Sequence[User] | None,
        Field(
            description='The Users that belong to this submission group.\n            This list must contain at least one member and no more than\n            project.max_group_size members. A User can only be a member\n            of one submission group per project.\n            This field is REQUIRED.'
        ),
    ]
    bonus_submissions_remaining: Annotated[
        int | None,
        Field(
            description='The number of unused bonus submission tokens this group has.'
        ),
    ]
    late_days_used: Annotated[
        Mapping[str, Any] | None,
        Field(
            description='Keeps track of how many late days each user in this\n            group has used.\n            Data format: {\n                "\\<username\\>": \\<num late days used\\>,\n                ...\n            }\n            NOTE: This field is updated only when a group member uses a\n            late day. If a user is moved to another group or this group\n            is merged with another one, this field will NOT be updated.'
        ),
    ]
    num_submissions: Annotated[int | None, Field(description='')]
    num_submits_towards_limit: Annotated[
        int | None,
        Field(
            description='The number of submissions this group has made in the current 24\n        hour period that are counted towards the daily submission limit.'
        ),
    ]
    created_at: Annotated[datetime | None, Field(description='')]
    last_modified: Annotated[datetime | None, Field(description='')]


class GroupInvitation(BaseModel):
    pk: int | None
    project: Annotated[int | None, Field(description='')]
    sender: Annotated[
        User | None,
        Field(
            description='The User who created this invitation.\n            This field is REQUIRED.'
        ),
    ]
    recipients: Annotated[
        Sequence[User] | None,
        Field(
            description='The Users that the sender has invited\n            to form a submission group together.\n            This field is REQUIRED.\n            This field may not be empty.'
        ),
    ]
    sender_username: Annotated[
        str | None,
        Field(description='The username of the User that sent this invitation.'),
    ]
    recipient_usernames: Annotated[
        Sequence[str] | None,
        Field(
            description='The usernames of the Users that will receive this invitation.'
        ),
    ]
    recipients_who_accepted: Annotated[
        Sequence[str] | None,
        Field(
            description='A list of usernames indicating which invitees have accepted\n        this invitation.\n        This field is READ ONLY.'
        ),
    ]


class Status(Enum):
    received = 'received'
    queued = 'queued'
    being_graded = 'being_graded'
    waiting_for_deferred = 'waiting_for_deferred'
    finished_grading = 'finished_grading'
    removed_from_queue = 'removed_from_queue'
    rejected = 'rejected'
    error = 'error'


class Submission(BaseModel):
    pk: int | None
    group: Annotated[
        int | None,
        Field(
            description='The SubmissionGroup that this submission belongs to. Note\n            that this field indirectly links this Submission object to a\n            Project.\n            This field is REQUIRED.'
        ),
    ]
    timestamp: Annotated[datetime | None, Field(description='')]
    submitter: Annotated[
        str | None, Field(description='The name of the user who made this submission')
    ]
    submitted_filenames: Annotated[
        Sequence[str] | None,
        Field(
            description='The names of files that were submitted,\n                     excluding those that were discarded.'
        ),
    ]
    discarded_files: Annotated[
        Sequence[str] | None,
        Field(
            description='The names of files that were discarded when this Submission was created.'
        ),
    ]
    missing_files: Annotated[
        Mapping[str, Any] | None,
        Field(
            description='Stores missing filenames and the additional number\n            of files needed to satisfy a file pattern requirement.\n            Stored as key-value pairs of the form:\n            {pattern: num_additional_needed}'
        ),
    ]
    status: Annotated[
        Status | None,
        Field(
            description='The grading status of this submission see\n            Submission.GradingStatus for details on allowed values.'
        ),
    ]
    is_past_daily_limit: Annotated[
        bool | None,
        Field(
            description='Whether this submission is past the daily submission limit.'
        ),
    ]
    is_bonus_submission: Annotated[
        bool | None,
        Field(
            description="When True, indicates that the group that made this\n            submission should be able to request normal feedback for\n            this submission's results.\n            Note: If this field is True, is_past_daily_limit should be\n            False."
        ),
    ]
    count_towards_total_limit: Annotated[
        bool | None,
        Field(
            description='Whether this submission should count towards the total submission limit.'
        ),
    ]
    does_not_count_for: Annotated[
        Sequence[str] | None,
        Field(
            description='A list of users for whom this submission will NOT\n            count as their final graded submission. Users are added to\n            this list if they are out of late days and another group\n            member (who still has late days remaining) uses their own\n            late day to submit.'
        ),
    ]
    position_in_queue: Annotated[
        int | None,
        Field(
            description="Returns this submission's position in the queue of submissions\n        to be graded for the associated project."
        ),
    ]
    grading_start_time: Annotated[
        datetime | None,
        Field(
            description='The time that the submission was marked as being_graded.Can be used to calculate time spent in queue.'
        ),
    ]
    non_deferred_grading_end_time: Annotated[
        datetime | None,
        Field(
            description='The time that the submission was marked as waiting_for_deferred.Can be used to calculate time spent grading non-deferred tests.'
        ),
    ]
    last_modified: Annotated[datetime | None, Field(description='')]


class Command(BaseModel):
    cmd: Annotated[
        str | None,
        Field(
            description="A string containing the command to be run.\n                  Note: This string will be inserted into ['bash', '-c', <cmd>]\n                     in order to be executed."
        ),
    ]
    name: Annotated[
        str | None,
        Field(
            description='An optional name for this command to be displayed to users.'
        ),
    ]
    time_limit: Annotated[
        int | None,
        Field(
            description='The time limit in seconds to be placed on the command.\n            Must be > 0\n            Must be <= 90'
        ),
    ]
    stack_size_limit: Annotated[
        int | None,
        Field(
            description='This field is IGNORED and will be removed in version 5.0.0.'
        ),
    ]
    use_virtual_memory_limit: Annotated[
        bool | None,
        Field(
            description='When set to false, the virtual memory limit will not\n            be applied to the command. Note that the sandbox will still apply\n            a physical memory limit to all commands run in the sandbox.'
        ),
    ]
    virtual_memory_limit: Annotated[
        int | None,
        Field(
            description='The maximum amount of virtual memory\n            (in bytes) the command can use. Must be > 0.\n            Limiting virtual memory can help produce cleaner\n            error messages when the command uses too much memory. However, some programs allocate\n            a large amount of virtual memory but use very little *physical* memory. For these\n            kinds of programs (e.g. Java programs), we recommend NOT limiting virtual memory.\n            Note that physical memory usage will still be limited for security reasons.'
        ),
    ]
    block_process_spawn: Annotated[
        bool | None,
        Field(
            description='When true, prevents the command from spawning child processes.'
        ),
    ]
    process_spawn_limit: Annotated[
        int | None,
        Field(
            description='This field is IGNORED and will be removed in version 5.0.0.\n            Use block_process_spawn instead.'
        ),
    ]


class SandboxDockerImage(BaseModel):
    pk: int | None
    display_name: Annotated[
        str | None,
        Field(
            description='A human-readable name for this sandbox image.\n                     Must be unique among images belonging to a course.\n                     This field is required.'
        ),
    ]
    course: Annotated[
        int | None, Field(description='The course this image is associated with.')
    ]
    last_modified: Annotated[datetime | None, Field(description='')]


class Status1(Enum):
    queued = 'queued'
    in_progress = 'in_progress'
    done = 'done'
    failed = 'failed'
    image_invalid = 'image_invalid'
    cancelled = 'cancelled'
    internal_error = 'internal_error'


class BuildSandboxDockerImageTask(BaseModel):
    pk: int | None
    created_at: Annotated[datetime | None, Field(description='')]
    status: Annotated[Status1 | None, Field(description='The status of the build.')]
    return_code: Annotated[
        int | None, Field(description='The exit status of the build command.')
    ]
    timed_out: Annotated[bool | None, Field(description='True if the build timed out.')]
    filenames: Annotated[
        Sequence[str] | None,
        Field(description='The names of the files uploaded by the user.'),
    ]
    course_id: Annotated[
        int | None,
        Field(
            description='The course this task is associated with.\n            Only superusers can create or update images with no associated course.'
        ),
    ]
    image: Annotated[
        SandboxDockerImage | None,
        Field(
            description='When initially null, indicates that a new image will be created.\n            That new image will then be set as the value for this field.\n\n            When not null initially, indicates that the specified image\n            should be updated when the build finishes.'
        ),
    ]
    validation_error_msg: Annotated[
        str | None,
        Field(
            description='Information for the user as to while the built image is invalid.'
        ),
    ]
    internal_error_msg: Annotated[
        str | None,
        Field(
            description='If an internal error occurs, the error message will be stored here.'
        ),
    ]
    last_modified: Annotated[datetime | None, Field(description='')]


class BuildImageStatus(Enum):
    queued = 'queued'
    in_progress = 'in_progress'
    done = 'done'
    failed = 'failed'
    image_invalid = 'image_invalid'
    cancelled = 'cancelled'
    internal_error = 'internal_error'


class AGTestSuiteFeedbackConfig(BaseModel):
    visible: Annotated[bool | None, Field(description='')]
    show_individual_tests: Annotated[
        bool | None,
        Field(
            description='Whether to show information about individual tests in a suite or just a points summary (if available).'
        ),
    ]
    show_setup_return_code: Annotated[bool | None, Field(description='')]
    show_setup_timed_out: Annotated[bool | None, Field(description='')]
    show_setup_stdout: Annotated[
        bool | None,
        Field(
            description="Whether to show stdout content from a suite's setup command."
        ),
    ]
    show_setup_stderr: Annotated[
        bool | None,
        Field(
            description="Whether to show stderr content from a suite's setup command."
        ),
    ]


class AGTestCaseFeedbackConfig(BaseModel):
    visible: Annotated[bool | None, Field(description='')]
    show_individual_commands: Annotated[bool | None, Field(description='')]


class StdinSource(Enum):
    none = 'none'
    text = 'text'
    instructor_file = 'instructor_file'
    setup_stdout = 'setup_stdout'
    setup_stderr = 'setup_stderr'


class ExpectedReturnCode(Enum):
    none = 'none'
    zero = 'zero'
    nonzero = 'nonzero'


class ExpectedStdoutSource(Enum):
    none = 'none'
    text = 'text'
    instructor_file = 'instructor_file'


class ExpectedStderrSource(Enum):
    none = 'none'
    text = 'text'
    instructor_file = 'instructor_file'


class ExpectedOutputSource(Enum):
    none = 'none'
    text = 'text'
    instructor_file = 'instructor_file'


class ValueFeedbackLevel(Enum):
    no_feedback = 'no_feedback'
    correct_or_incorrect = 'correct_or_incorrect'
    expected_and_actual = 'expected_and_actual'


class AGTestCommandResultFeedback(BaseModel):
    pk: int | None
    ag_test_command_pk: Annotated[int | None, Field(description='')]
    ag_test_command_name: Annotated[str | None, Field(description='')]
    fdbk_settings: Annotated[Mapping[str, Any] | None, Field(description='')]
    timed_out: Annotated[bool | None, Field(description='')]
    return_code_correct: Annotated[bool | None, Field(description='')]
    expected_return_code: Annotated[ExpectedReturnCode | None, Field(description='')]
    actual_return_code: Annotated[int | None, Field(description='')]
    return_code_points: Annotated[int | None, Field(description='')]
    return_code_points_possible: Annotated[int | None, Field(description='')]
    stdout_correct: Annotated[bool | None, Field(description='')]
    stdout_points: Annotated[int | None, Field(description='')]
    stdout_points_possible: Annotated[int | None, Field(description='')]
    stderr_correct: Annotated[bool | None, Field(description='')]
    stderr_points: Annotated[int | None, Field(description='')]
    stderr_points_possible: Annotated[int | None, Field(description='')]
    total_points: Annotated[int | None, Field(description='')]
    total_points_possible: Annotated[int | None, Field(description='')]


class FeedbackCategory(Enum):
    normal = 'normal'
    ultimate_submission = 'ultimate_submission'
    past_limit_submission = 'past_limit_submission'
    staff_viewer = 'staff_viewer'
    max = 'max'


class TestNameDiscoveryWhitespaceHandling(Enum):
    newline = 'newline'
    any_whitespace = 'any_whitespace'


class BugsExposedFeedbackLevel(Enum):
    no_feedback = 'no_feedback'
    num_bugs_exposed = 'num_bugs_exposed'
    exposed_bug_names = 'exposed_bug_names'
    all_bug_names = 'all_bug_names'


class MutationTestSuiteResultFeedback(BaseModel):
    pk: int | None
    mutation_test_suite_name: Annotated[str | None, Field(description='')]
    mutation_test_suite_pk: Annotated[int | None, Field(description='')]
    fdbk_settings: Annotated[
        Mapping[str, Any] | None,
        Field(
            description="A dictionary representation of this object's feedback config."
        ),
    ]
    has_setup_command: Annotated[bool | None, Field(description='')]
    setup_command_name: Annotated[str | None, Field(description='')]
    setup_return_code: Annotated[int | None, Field(description='')]
    setup_timed_out: Annotated[bool | None, Field(description='')]
    get_student_test_names_return_code: Annotated[int | None, Field(description='')]
    get_student_test_names_timed_out: Annotated[bool | None, Field(description='')]
    student_tests: Annotated[Sequence[str] | None, Field(description='')]
    discarded_tests: Annotated[Sequence[str] | None, Field(description='')]
    invalid_tests: Annotated[Sequence[str] | None, Field(description='')]
    timed_out_tests: Annotated[Sequence[str] | None, Field(description='')]
    num_bugs_exposed: Annotated[int | None, Field(description='')]
    bugs_exposed: Annotated[Sequence[str] | None, Field(description='')]
    all_bug_names: Annotated[Sequence[str] | None, Field(description='')]
    total_points: Annotated[str | None, Field(description='')]
    total_points_possible: Annotated[str | None, Field(description='')]


class RerunSubmissionsTask(BaseModel):
    pk: int | None
    progress: Annotated[int | None, Field(description='')]
    is_cancelled: Annotated[
        bool | None,
        Field(description='Indicates whether the task has been cancelled by the user.'),
    ]
    error_msg: Annotated[str | None, Field(description='')]
    creator: Annotated[int | None, Field(description='')]
    created_at: Annotated[datetime | None, Field(description='')]
    has_error: Annotated[bool | None, Field(description='')]
    project: Annotated[
        int | None, Field(description='The Project this task belongs to.')
    ]
    rerun_all_submissions: Annotated[
        bool | None,
        Field(
            description='When True, indicates that all submissions for the specified\n                     project should be rerun. Otherwise, only the submissions\n                     whose primary keys are listed in submission_pks should be rerun.'
        ),
    ]
    submission_pks: Annotated[
        Sequence[int] | None,
        Field(
            description='When rerun_all_submissions is False, specifies which submissions\n                     should be rerun.'
        ),
    ]
    rerun_all_ag_test_suites: Annotated[
        bool | None,
        Field(
            description='When True, indicates that all AGTestSuites belonging\n                     to the specified project should be rerun. Otherwise,\n                     only the AGTestSuites specified in ag_test_suite_data should\n                     be rerun.'
        ),
    ]
    ag_test_suite_data: Annotated[
        Mapping[str, Any] | None,
        Field(
            description='When rerun_all_ag_test_suites is False, specifies which\n                     AGTestSuites should be rerun and which AGTestCases within\n                     those suites should be rerun.\n\n        Data format:\n        {\n            // Note: JSON format requires that keys are strings. Postgres\n            // doesn\'t seem to care, but some JSON serializers might.\n            "<ag_test_suite_pk>": [<ag_test_case_pk>, ...],\n            ...\n        }\n\n        If an ag_test_suite_pk is mapped to an empty list, then all ag test cases\n        belonging to that ag test suite will be rerun.'
        ),
    ]
    rerun_all_mutation_test_suites: Annotated[
        bool | None,
        Field(
            description='When True, indicates that all MutationTestSuites belonging\n                     to the specified project should be rerun. Otherwise,\n                     only the MutationTestSuites specified in mutation_test_suite_pks\n                     should be rerun.'
        ),
    ]
    mutation_suite_pks: Annotated[
        Sequence[int] | None,
        Field(
            description='When rerun_all_mutation_test_suites is False, specifies which\n                     mutation test suites should be rerun.'
        ),
    ]


class PointsStyle(Enum):
    start_at_zero_and_add = 'start_at_zero_and_add'
    start_at_max_and_subtract = 'start_at_max_and_subtract'


class Criterion(BaseModel):
    pk: int | None
    handgrading_rubric: Annotated[
        int | None, Field(description='The rubric this Criterion belongs to.')
    ]
    last_modified: Annotated[datetime | None, Field(description='')]
    short_description: Annotated[
        str | None, Field(description='A short description of this Criterion.')
    ]
    long_description: Annotated[
        str | None,
        Field(
            description='A long description of this Criterion. Note that there is no\n                     enforced length difference between short_ and long_description.\n                     The separation is purely to be used by clients.'
        ),
    ]
    points: Annotated[
        float | None,
        Field(
            description='The amount of points to add or subtract from a handgrading score\n                     when selected.'
        ),
    ]


class Annotation(BaseModel):
    pk: int | None
    handgrading_rubric: Annotated[
        int | None,
        Field(description='The HandgradingRubric this Annotation belongs to.'),
    ]
    short_description: Annotated[
        str | None, Field(description='A short description of this Annotation.')
    ]
    long_description: Annotated[
        str | None,
        Field(
            description='A long description of this Criterion. Note that there is no\n                     enforced length difference between short_ and long_description.\n                     The separation is purely to be used by clients.'
        ),
    ]
    deduction: Annotated[
        float | None,
        Field(
            description='The amount of points to deduct from a handgrading score when\n                     applied. Must be non-positive.'
        ),
    ]
    max_deduction: Annotated[
        float | None,
        Field(
            description='The maximum amount of points that can be cumulatively\n                     deducted from a handgrading score by applications of\n                     this annotation. Must be None or non-positive.'
        ),
    ]
    last_modified: Annotated[datetime | None, Field(description='')]


class CriterionResult(BaseModel):
    pk: int | None
    last_modified: Annotated[datetime | None, Field(description='')]
    selected: Annotated[
        bool | None,
        Field(
            description="When True, indicates that the criterion's point allotment should be\n                     added to (or subtracted from if negative) the total handgrading points."
        ),
    ]
    criterion: Annotated[
        Criterion | None,
        Field(description='The Criterion that the CriterionResult is tied to.'),
    ]
    handgrading_result: Annotated[
        int | None,
        Field(description='The HandgradingResult this CriterionResult belongs to.'),
    ]


class Location(BaseModel):
    filename: Annotated[
        str | None, Field(description='The file that contains the source code region.')
    ]
    first_line: Annotated[
        int | None,
        Field(
            description='The first line in the source code region. Must be non-negative.'
        ),
    ]
    last_line: Annotated[
        int | None,
        Field(
            description='The last line in the source code region (inclusive). Must be non-negative.'
        ),
    ]


class UserRoles(BaseModel):
    is_admin: bool | None
    is_staff: bool | None
    is_student: bool | None
    is_handgrader: bool | None


class Project(BaseModel):
    pk: int | None
    name: Annotated[
        str | None,
        Field(
            description='The name used to identify this project.\n            Must be non-empty and non-null.\n            Must be unique among Projects associated with\n            a given course.\n            This field is REQUIRED.'
        ),
    ]
    last_modified: Annotated[datetime | None, Field(description='')]
    course: Annotated[
        int | None,
        Field(
            description='The Course this project belongs to.\n            This field is REQUIRED.'
        ),
    ]
    visible_to_students: Annotated[
        bool | None,
        Field(
            description='Whether information about this Project can\n            be viewed by students.'
        ),
    ]
    closing_time: Annotated[
        datetime | None,
        Field(
            description='The date and time that this project should stop\n            accepting submissions.\n            A value of None indicates that this project should\n            stay open.\n            In the API, this field is hidden from non-admins.'
        ),
    ]
    soft_closing_time: Annotated[
        datetime | None,
        Field(
            description='The date and time that should be displayed as the\n            due date for this project. Unlike closing_time,\n            soft_closing_time does not affect whether submissions are\n            actually accepted.\n            If not None and closing_time is not None, this value must be\n            less than (before) closing_time.'
        ),
    ]
    disallow_student_submissions: Annotated[
        bool | None,
        Field(
            description='A hard override that indicates that students should\n            be prevented from submitting even if visible_to_students is\n            True and it is before closing_time.'
        ),
    ]
    disallow_group_registration: Annotated[
        bool | None,
        Field(
            description='A hard override that indicates that students should\n            not be able to send, accept, or reject group\n            invitations.'
        ),
    ]
    guests_can_submit: Annotated[
        bool | None,
        Field(
            description='By default, only admins, staff, and students\n            for a given Course can view and submit to its Projects.\n            When True, submissions will be accepted from guests\n            with the following caveats:\n                - Guests must be given a direct link to the project.\n                - When group work is allowed, guests can\n                only be in groups with other guests.'
        ),
    ]
    min_group_size: Annotated[
        int | None,
        Field(
            description='The minimum number of students that can work in a\n            group on this project.\n            Must be >= 1.\n            Must be <= max_group_size.'
        ),
    ]
    max_group_size: Annotated[
        int | None,
        Field(
            description='The maximum number of students that can work in a\n            group on this project.\n            Must be >= 1.\n            Must be >= min_group_size.'
        ),
    ]
    submission_limit_per_day: Annotated[
        int | None,
        Field(
            description='The number of submissions each group is allowed per\n            day before either reducing feedback or preventing further\n            submissions. A value of None indicates no limit.'
        ),
    ]
    allow_submissions_past_limit: Annotated[
        bool | None,
        Field(
            description='Whether to allow additional submissions after a\n            group has submitted submission_limit_per_day times.'
        ),
    ]
    groups_combine_daily_submissions: Annotated[
        bool | None,
        Field(
            description='If True, group members can "pool" their daily submissions.\n            For example, if submission_limit_per_day is 3,\n            a group with 2 members would get 6 submissions per day.'
        ),
    ]
    submission_limit_reset_time: Annotated[
        time | None,
        Field(
            description='The time that marks the beginning and end of the 24\n            hour period during which submissions should be counted\n            towards the daily limit. Defaults to 00:00:00.'
        ),
    ]
    submission_limit_reset_timezone: Annotated[
        SubmissionLimitResetTimezone | None,
        Field(
            description='A string representing the timezone to use when computing\n            how many submissions a group has made in a 24 hour period.'
        ),
    ]
    num_bonus_submissions: Annotated[int | None, Field(description='')]
    total_submission_limit: Annotated[
        int | None,
        Field(
            description='The maximum number of times a Group can submit to\n            this Project EVER.'
        ),
    ]
    allow_late_days: Annotated[
        bool | None,
        Field(
            description='Whether to allow the use of late days for submitting\n            past the deadline.'
        ),
    ]
    ultimate_submission_policy: Annotated[
        UltimateSubmissionPolicy | None,
        Field(
            description='The "ultimate" submission for a group is the one\n            that will be used for final grading. This field specifies\n            how the ultimate submission should be determined.'
        ),
    ]
    hide_ultimate_submission_fdbk: Annotated[
        bool | None,
        Field(
            description='A hard override that indicates that ultimate\n            submission feedback should not be shown, even if the\n            appropriate criteria are met.'
        ),
    ]
    instructor_files: Annotated[Sequence[InstructorFile] | None, Field(description='')]
    expected_student_files: Annotated[
        Sequence[ExpectedStudentFile] | None, Field(description='')
    ]
    has_handgrading_rubric: Annotated[
        bool | None, Field(description='Whether this project has a handgrading rubric.')
    ]
    send_email_on_submission_received: Annotated[
        bool | None,
        Field(
            description='If True, users will receive a confirmation email\n            every time a submission of theirs is recorded in the\n            database.'
        ),
    ]
    send_email_on_non_deferred_tests_finished: Annotated[
        bool | None,
        Field(
            description='If True, users will receive a confirmation email\n            once all non-deferred test cases for their submission are\n            finished grading.'
        ),
    ]
    use_honor_pledge: Annotated[
        bool | None,
        Field(
            description='If True, then the frontend website should require\n            students to acknowledge an honor pledge. The text of the\n            honor pledge is stored in honor_pledge_text.'
        ),
    ]
    honor_pledge_text: Annotated[
        str | None, Field(description='The text of the honor pledge to display.')
    ]


class AGTestCommandFeedbackConfig(BaseModel):
    visible: Annotated[bool | None, Field(description='')]
    return_code_fdbk_level: Annotated[ValueFeedbackLevel | None, Field(description='')]
    stdout_fdbk_level: Annotated[ValueFeedbackLevel | None, Field(description='')]
    stderr_fdbk_level: Annotated[ValueFeedbackLevel | None, Field(description='')]
    show_points: Annotated[bool | None, Field(description='')]
    show_actual_return_code: Annotated[bool | None, Field(description='')]
    show_actual_stdout: Annotated[bool | None, Field(description='')]
    show_actual_stderr: Annotated[bool | None, Field(description='')]
    show_whether_timed_out: Annotated[bool | None, Field(description='')]


class AGTestCaseResultFeedback(BaseModel):
    pk: int | None
    ag_test_case_name: Annotated[str | None, Field(description='')]
    ag_test_case_pk: Annotated[int | None, Field(description='')]
    fdbk_settings: Annotated[Mapping[str, Any] | None, Field(description='')]
    total_points: Annotated[int | None, Field(description='')]
    total_points_possible: Annotated[int | None, Field(description='')]
    ag_test_command_results: Annotated[
        Sequence[AGTestCommandResultFeedback] | None, Field(description='')
    ]


class MutationTestSuiteFeedbackConfig(BaseModel):
    visible: Annotated[bool | None, Field(description='')]
    show_setup_return_code: Annotated[bool | None, Field(description='')]
    show_setup_stdout: Annotated[bool | None, Field(description='')]
    show_setup_stderr: Annotated[bool | None, Field(description='')]
    show_get_test_names_return_code: Annotated[bool | None, Field(description='')]
    show_get_test_names_stdout: Annotated[bool | None, Field(description='')]
    show_get_test_names_stderr: Annotated[bool | None, Field(description='')]
    show_validity_check_stdout: Annotated[bool | None, Field(description='')]
    show_validity_check_stderr: Annotated[bool | None, Field(description='')]
    show_grade_buggy_impls_stdout: Annotated[bool | None, Field(description='')]
    show_grade_buggy_impls_stderr: Annotated[bool | None, Field(description='')]
    show_invalid_test_names: Annotated[bool | None, Field(description='')]
    show_points: Annotated[bool | None, Field(description='')]
    bugs_exposed_fdbk_level: Annotated[
        BugsExposedFeedbackLevel | None, Field(description='')
    ]


class HandgradingRubric(BaseModel):
    pk: int | None
    project: Annotated[
        int | None, Field(description='The Project this HandgradingRubric belongs to.')
    ]
    last_modified: Annotated[datetime | None, Field(description='')]
    points_style: Annotated[
        PointsStyle | None,
        Field(
            description='Determines how total_points and total_possible_points are calculated\n                     for HandgradingResults.'
        ),
    ]
    max_points: Annotated[
        float | None,
        Field(
            description='The denominator of a handgrading score.\n                     When points_style is "start_at_zero_and_add", this value\n                     overrides the sum of positive Criteria point values as the\n                     total points possible.\n                     When points_style is "start_at_max_and_subtract", this field\n                     is REQUIRED.'
        ),
    ]
    show_grades_and_rubric_to_students: Annotated[
        bool | None,
        Field(
            description='Whether students can see their handgrading scores,\n                     including information from the rubric.'
        ),
    ]
    show_only_applied_rubric_to_students: Annotated[
        bool | None,
        Field(
            description='Whether students can see rubric items that\n                     were not applied to their submission.'
        ),
    ]
    handgraders_can_leave_comments: Annotated[
        bool | None,
        Field(
            description='Whether handgraders can add comments to a HandgradingResult.'
        ),
    ]
    handgraders_can_adjust_points: Annotated[
        bool | None,
        Field(
            description='Whether handgraders can edit HandgradingResult.point_adjustment.'
        ),
    ]
    criteria: Annotated[Sequence[Criterion] | None, Field(description='')]
    annotations: Annotated[Sequence[Annotation] | None, Field(description='')]


class AppliedAnnotation(BaseModel):
    pk: int | None
    last_modified: Annotated[datetime | None, Field(description='')]
    location: Annotated[
        Location | None,
        Field(description='The source code location where the Annotation was applied.'),
    ]
    annotation: Annotated[
        Annotation | None,
        Field(description='The Annotation that was applied to the source code.'),
    ]
    handgrading_result: Annotated[
        int | None,
        Field(description='The HandgradingResult the applied annotation belongs to.'),
    ]


class Comment(BaseModel):
    pk: int | None
    last_modified: Annotated[datetime | None, Field(description='')]
    location: Annotated[
        Location | None,
        Field(
            description='When not None, specifies the source code location this comment\n                     applies to.'
        ),
    ]
    text: Annotated[str | None, Field(description='Text to be shown to students.')]
    handgrading_result: Annotated[
        int | None,
        Field(description='The HandgradingResult that this Comment belongs to.'),
    ]


class AGTestCommand(BaseModel):
    pk: int | None
    name: Annotated[
        str | None,
        Field(
            description='The name used to identify this command.\n                         Must be non-empty and non-null.\n                         Must be unique among commands that belong to the same autograder test.\n                         This field is REQUIRED.'
        ),
    ]
    ag_test_case: Annotated[
        int | None, Field(description='The AGTestCase that this command belongs to.')
    ]
    last_modified: Annotated[datetime | None, Field(description='')]
    cmd: Annotated[
        str | None,
        Field(
            description='A string containing the command to be run.\n                     Note: This string will be inserted into [\'bash\', \'-c\', <cmd>]\n                        in order to be executed.\n                     Note: This string defaults to the "true" command\n                     (which does nothing and returns 0) so that AGCommands are\n                     default-creatable.'
        ),
    ]
    stdin_source: Annotated[
        StdinSource | None,
        Field(
            description='Specifies what kind of source stdin will be redirected from.'
        ),
    ]
    stdin_text: Annotated[
        str | None,
        Field(
            description='A string whose contents should be redirected to the stdin of this command.\n                     This value is used when stdin_source is StdinSource.text and is ignored\n                     otherwise.'
        ),
    ]
    stdin_instructor_file: Annotated[
        InstructorFile | None,
        Field(
            description='An InstructorFile whose contents should be redirected to the stdin of this\n                     command. This value is used when stdin_source is StdinSource.instructor_file\n                     and is ignored otherwise.'
        ),
    ]
    expected_return_code: Annotated[
        ExpectedReturnCode | None,
        Field(description="Specifies the command's expected return code."),
    ]
    expected_stdout_source: Annotated[
        ExpectedStdoutSource | None,
        Field(
            description="Specifies what kind of source this command's stdout should be compared to."
        ),
    ]
    expected_stdout_text: Annotated[
        str | None,
        Field(
            description="A string whose contents should be compared against this command's stdout.\n                     This value is used when expected_stdout_source is ExpectedOutputSource.text\n                     and is ignored otherwise."
        ),
    ]
    expected_stdout_instructor_file: Annotated[
        InstructorFile | None,
        Field(
            description="An InstructorFile whose contents should be compared against this command's\n                     stdout. This value is used (and may not be null) when expected_stdout_source\n                     is ExpectedOutputSource.instructor_file and is ignored otherwise."
        ),
    ]
    expected_stderr_source: Annotated[
        ExpectedStderrSource | None,
        Field(
            description="Specifies what kind of source this command's stderr should be compared to."
        ),
    ]
    expected_stderr_text: Annotated[
        str | None,
        Field(
            description="A string whose contents should be compared against this command's stderr.\n                     This value is used when expected_stderr_source is ExpectedOutputSource.text\n                     and is ignored otherwise."
        ),
    ]
    expected_stderr_instructor_file: Annotated[
        InstructorFile | None,
        Field(
            description="An InstructorFile whose contents should be compared against this command's\n                     stderr. This value is used (and may not be null) when expected_stderr_source\n                     is ExpectedOutputSource.instructor_file and is ignored otherwise."
        ),
    ]
    ignore_case: Annotated[
        bool | None,
        Field(description='Ignore case when checking output. Equivalent to diff -i'),
    ]
    ignore_whitespace: Annotated[
        bool | None,
        Field(
            description='Ignore inline whitespace when checking output. Equivalent to diff -w'
        ),
    ]
    ignore_whitespace_changes: Annotated[
        bool | None,
        Field(
            description='Ignore whitespace changes when checking output. Equivalent to diff -b'
        ),
    ]
    ignore_blank_lines: Annotated[
        bool | None,
        Field(
            description='Ignore changes in blank lines when checking output. Equivalent to diff -B'
        ),
    ]
    points_for_correct_return_code: Annotated[
        int | None,
        Field(
            description='The number of points to be awarded when this command\n                     produces the correct return_code'
        ),
    ]
    points_for_correct_stdout: Annotated[
        int | None,
        Field(
            description='The number of points to be awarded when this command\n                     produces the correct stdout'
        ),
    ]
    points_for_correct_stderr: Annotated[
        int | None,
        Field(
            description='The number of points to be awarded when this command\n                     produces the correct stderr'
        ),
    ]
    deduction_for_wrong_return_code: Annotated[
        int | None,
        Field(
            description='The number of points to deduct when this command\n                     produces the wrong return code (this value must be negative).\n                     Note: The total points given for a single command may be negative,\n                     but the total points for an AGTestCase will be capped at zero.'
        ),
    ]
    deduction_for_wrong_stdout: Annotated[
        int | None,
        Field(
            description='The number of points to deduct when this command\n                     produces the wrong stdout (this value must be negative).\n                     Note: The total points given for a single command may be negative,\n                     but the total points for an AGTestCase will be capped at zero.'
        ),
    ]
    deduction_for_wrong_stderr: Annotated[
        int | None,
        Field(
            description='The number of points to deduct when this command\n                     produces the wrong stderr (this value must be negative).\n                     Note: The total points given for a single command may be negative,\n                     but the total points for an AGTestCase will be capped at zero.'
        ),
    ]
    normal_fdbk_config: Annotated[
        AGTestCommandFeedbackConfig | None,
        Field(description='Feedback settings for a normal Submission.'),
    ]
    first_failed_test_normal_fdbk_config: Annotated[
        AGTestCommandFeedbackConfig | None,
        Field(
            description='When non-null, specifies feedback to be given when\n                     this command is in the first test case that failed\n                     within a suite.'
        ),
    ]
    ultimate_submission_fdbk_config: Annotated[
        AGTestCommandFeedbackConfig | None,
        Field(description='Feedback settings for an ultimate Submission.'),
    ]
    past_limit_submission_fdbk_config: Annotated[
        AGTestCommandFeedbackConfig | None,
        Field(
            description='Feedback settings for a Submission that is past the daily limit.'
        ),
    ]
    staff_viewer_fdbk_config: Annotated[
        AGTestCommandFeedbackConfig | None,
        Field(
            description='Feedback settings for a staff member viewing a Submission from another group.'
        ),
    ]
    time_limit: Annotated[
        int | None,
        Field(
            description='The time limit in seconds to be placed on the command.\n            Must be > 0\n            Must be <= 90'
        ),
    ]
    use_virtual_memory_limit: Annotated[
        bool | None,
        Field(
            description='When set to false, the virtual memory limit will not\n            be applied to the command. Note that the sandbox will still apply\n            a physical memory limit to all commands run in the sandbox.'
        ),
    ]
    virtual_memory_limit: Annotated[
        int | None,
        Field(
            description='The maximum amount of virtual memory\n            (in bytes) the command can use. Must be > 0.\n            Limiting virtual memory can help produce cleaner\n            error messages when the command uses too much memory. However, some programs allocate\n            a large amount of virtual memory but use very little *physical* memory. For these\n            kinds of programs (e.g. Java programs), we recommend NOT limiting virtual memory.\n            Note that physical memory usage will still be limited for security reasons.'
        ),
    ]
    block_process_spawn: Annotated[
        bool | None,
        Field(
            description='When true, prevents the command from spawning child processes.'
        ),
    ]


class AGTestSuiteResultFeedback(BaseModel):
    pk: int | None
    ag_test_suite_name: Annotated[str | None, Field(description='')]
    ag_test_suite_pk: Annotated[int | None, Field(description='')]
    fdbk_settings: Annotated[Mapping[str, Any] | None, Field(description='')]
    total_points: Annotated[int | None, Field(description='')]
    total_points_possible: Annotated[int | None, Field(description='')]
    setup_name: Annotated[str | None, Field(description='')]
    setup_return_code: Annotated[int | None, Field(description='')]
    setup_timed_out: Annotated[bool | None, Field(description='')]
    ag_test_case_results: Annotated[
        Sequence[AGTestCaseResultFeedback] | None, Field(description='')
    ]


class MutationTestSuite(BaseModel):
    pk: int | None
    name: Annotated[
        str | None,
        Field(
            description='The name used to identify this MutationTestSuite.\n                     Must be non-empty and non-null.'
        ),
    ]
    project: Annotated[
        int | None,
        Field(description='The Project that this mutation test suite belongs to.'),
    ]
    instructor_files_needed: Annotated[
        Sequence[InstructorFile] | None,
        Field(
            description='The project files that will be copied into the sandbox before the suite\n                     is graded.'
        ),
    ]
    read_only_instructor_files: Annotated[
        bool | None,
        Field(
            description='When True, project files needed for this suite will be read-only when this\n                     suite is graded.'
        ),
    ]
    student_files_needed: Annotated[
        Sequence[ExpectedStudentFile] | None,
        Field(
            description='Student-submitted files matching these patterns will be copied into the\n                     sandbox before the suite is graded.'
        ),
    ]
    buggy_impl_names: Annotated[
        Sequence[str] | None,
        Field(
            description='The names of buggy implementations that student tests should be run against.'
        ),
    ]
    use_setup_command: Annotated[bool | None, Field(description='')]
    setup_command: Annotated[
        Command | None,
        Field(
            description='A command to be run after student and project files have\n                     been added to the sandbox but before any other commands are run.\n                     To indicate that no setup command should be run,\n                     set use_setup_command to False.'
        ),
    ]
    get_student_test_names_command: Annotated[
        Command | None,
        Field(
            description="This required command should print out a list of student\n             test case names. The test case names should not be wrapped\n             in quotes, even if the test names contain spaces.\n             If test_name_discovery_whitespace_handling is set to\n             'any_whitespace', the output of this command will be parsed using\n             Python's str.split(). If set to 'newline', the output will\n             be parsed using Python's str.splitlines(), and leading and trailing\n             whitespace will be stripped from each line."
        ),
    ]
    test_name_discovery_whitespace_handling: Annotated[
        TestNameDiscoveryWhitespaceHandling | None, Field(description='')
    ]
    max_num_student_tests: Annotated[
        int | None,
        Field(
            description='The maximum number of test cases students are allowed to submit.\n                     If more than this many tests are discovered by the\n                     get_student_test_names_command, test names will be discarded\n                     from the end of that list.'
        ),
    ]
    student_test_validity_check_command: Annotated[
        Command | None,
        Field(
            description='This command will be run once for each detected student test case.\n                     An exit status of zero indicates that a student test case is valid,\n                     whereas a nonzero exit status indicates that a student test case\n                     is invalid.\n                     This command must contain the placeholder ${student_test_name} at least once. That\n                     placeholder will be replaced with the name of the student test case\n                     that is to be checked for validity.'
        ),
    ]
    grade_buggy_impl_command: Annotated[
        Command | None,
        Field(
            description='This command will be run at least once for every buggy implementation.\n            A nonzero exit status indicates that the valid student tests exposed the\n            buggy impl, whereas an exit status of zero indicates that the student\n            tests did not expose the buggy impl.\n\n            This command must contain the placeholders ${buggy_impl_name}\n            and one of ${student_test_name} or ${all_valid_test_names}.\n            The placeholder ${buggy_impl_name} will be replaced with the name of\n            the buggy impl that the student test is being run against.\n            If the placeholder ${student_test_name} is present,\n            it will be replaced with the name of a single valid student test case,\n            and the command will be run once for every (buggy implementation, valid test) pair.\n            If the placeholder ${all_valid_test_names} is present,\n            it will be replaced with the individually-quoted names of all valid\n            student tests, and the command will be run once for each buggy implementation.\n\n            This latter approach can potentially reduce the runtime (e.g., by\n            reducing the number of times an interpreter is invoked).\n            Note that you may need to specify a higher time limit with this strategy--for\n            example, if each individual test takes 1 second to run and running\n            10 tests at once takes 10 seconds, the time limit will need to be\n            more than 10 seconds, otherwise buggy impls could be erroneously\n            marked as exposed due to the tests exceeding a low time limit.'
        ),
    ]
    points_per_exposed_bug: Annotated[
        str | None,
        Field(
            description='The number of points to be awarded per buggy implementation exposed by\n                     the student test cases. This field is limited to 4 digits total and a maximum\n                     of 2 decimal places.'
        ),
    ]
    max_points: Annotated[
        int | None,
        Field(description='An optional ceiling on the number of points to be awarded.'),
    ]
    deferred: Annotated[
        bool | None,
        Field(
            description='If true, this mutation test suite can be graded asynchronously.\n                     Deferred suites that have yet to be graded do not prevent members\n                     of a group from submitting again.'
        ),
    ]
    sandbox_docker_image: Annotated[
        SandboxDockerImage | None,
        Field(description='The sandbox docker image to use for running this suite.'),
    ]
    allow_network_access: Annotated[
        bool | None,
        Field(
            description='Specifies whether the sandbox should allow commands run inside of it to\n                     make network calls outside of the sandbox.'
        ),
    ]
    normal_fdbk_config: Annotated[
        MutationTestSuiteFeedbackConfig | None,
        Field(description='Feedback settings for a normal Submission.'),
    ]
    ultimate_submission_fdbk_config: Annotated[
        MutationTestSuiteFeedbackConfig | None,
        Field(description='Feedback settings for an ultimate Submission.'),
    ]
    past_limit_submission_fdbk_config: Annotated[
        MutationTestSuiteFeedbackConfig | None,
        Field(
            description='Feedback settings for a Submission that is past the daily limit.'
        ),
    ]
    staff_viewer_fdbk_config: Annotated[
        MutationTestSuiteFeedbackConfig | None,
        Field(
            description='Feedback settings for a staff member viewing a Submission from another group.'
        ),
    ]
    last_modified: Annotated[datetime | None, Field(description='')]


class HandgradingResult(BaseModel):
    pk: int | None
    last_modified: Annotated[datetime | None, Field(description='')]
    submission: Annotated[
        int | None,
        Field(description='The specific submission that is being handgraded.'),
    ]
    handgrading_rubric: Annotated[
        HandgradingRubric | None,
        Field(
            description='The HandgradingRubric that this HandgradingResult is based on.'
        ),
    ]
    group: Annotated[
        int | None,
        Field(description='The SubmissionGroup that this HandgradingResult is for.'),
    ]
    applied_annotations: Annotated[
        Sequence[AppliedAnnotation] | None, Field(description='')
    ]
    comments: Annotated[Sequence[Comment] | None, Field(description='')]
    criterion_results: Annotated[
        Sequence[CriterionResult] | None, Field(description='')
    ]
    finished_grading: Annotated[
        bool | None,
        Field(
            description="Handgraders should set this field to True when they are finished\n                     grading this group's submission."
        ),
    ]
    points_adjustment: Annotated[
        float | None,
        Field(
            description="An arbitrary adjustment to this result's total points.\n                     Note that this does not affect total points possible."
        ),
    ]
    submitted_filenames: Annotated[
        Sequence[str] | None,
        Field(
            description='Returns a list of strings containing the filenames of the Submission this result\n        belongs to.'
        ),
    ]
    total_points: Annotated[
        float | None,
        Field(
            description='The total number of points awarded. Note that it is possible\n        for this value to be greater than total_points.'
        ),
    ]
    total_points_possible: Annotated[
        float | None,
        Field(
            description="The denominator of the handgrading score based on the\n        handgrading rubric's points style and max points."
        ),
    ]


class AGTestCase(BaseModel):
    pk: int | None
    name: Annotated[
        str | None,
        Field(
            description='The name used to identify this autograder test.\n                     Must be non-empty and non-null.\n                     Must be unique among autograder tests that belong to the same suite.\n                     This field is REQUIRED.'
        ),
    ]
    last_modified: Annotated[datetime | None, Field(description='')]
    ag_test_suite: Annotated[
        int | None,
        Field(
            description='The suite this autograder test belongs to.\n                     This field is REQUIRED.'
        ),
    ]
    ag_test_commands: Annotated[Sequence[AGTestCommand] | None, Field(description='')]
    normal_fdbk_config: Annotated[
        AGTestCaseFeedbackConfig | None, Field(description='')
    ]
    ultimate_submission_fdbk_config: Annotated[
        AGTestCaseFeedbackConfig | None, Field(description='')
    ]
    past_limit_submission_fdbk_config: Annotated[
        AGTestCaseFeedbackConfig | None, Field(description='')
    ]
    staff_viewer_fdbk_config: Annotated[
        AGTestCaseFeedbackConfig | None, Field(description='')
    ]


class SubmissionResultFeedback(BaseModel):
    pk: int | None
    total_points: Annotated[int | str | None, Field(description='')]
    total_points_possible: Annotated[int | str | None, Field(description='')]
    ag_test_suite_results: Annotated[
        Sequence[AGTestSuiteResultFeedback] | None, Field(description='')
    ]
    mutation_test_suite_results: Annotated[
        Sequence[MutationTestSuiteResultFeedback] | None, Field(description='')
    ]


class SubmissionWithResults(Submission):
    results: SubmissionResultFeedback | None


class AGTestSuite(BaseModel):
    pk: int | None
    name: Annotated[
        str | None,
        Field(
            description='The name used to identify this suite.\n                     Must be non-empty and non-null.\n                     Must be unique among suites that belong to the same project.\n                     This field is REQUIRED.'
        ),
    ]
    project: Annotated[
        int | None,
        Field(
            description='The project this suite belongs to.\n                                             This field is REQUIRED.'
        ),
    ]
    last_modified: Annotated[datetime | None, Field(description='')]
    instructor_files_needed: Annotated[
        Sequence[InstructorFile] | None,
        Field(
            description="The project files that will be copied into the sandbox before the suite's\n                     tests are run."
        ),
    ]
    read_only_instructor_files: Annotated[
        bool | None,
        Field(
            description='When True, project files needed for this suite will be read-only when this\n                     suite is run.'
        ),
    ]
    student_files_needed: Annotated[
        Sequence[ExpectedStudentFile] | None,
        Field(
            description="Student-submitted files matching these patterns will be copied into the\n                     sandbox before the suite's tests are run."
        ),
    ]
    ag_test_cases: Annotated[Sequence[AGTestCase] | None, Field(description='')]
    setup_suite_cmd: Annotated[
        str | None,
        Field(
            description="A command to be run before this suite's tests are run.\n                     This command is only run once at the beginning of the suite.\n                     This command will be run after the student and project files\n                     have been added to the sandbox.\n                     If this field is empty, then no setup command will be run."
        ),
    ]
    setup_suite_cmd_name: Annotated[
        str | None, Field(description="The name of this suite's setup command.")
    ]
    reject_submission_if_setup_fails: Annotated[
        bool | None,
        Field(
            description='When this field is True and the suite has a setup command,\n            the submission will be rejected if that setup command fails.\n            This field is only allowed to be True for the first non-deferred AGTestSuite\n            (order specified by Project.get_agtestsuite_order()) of the Project.'
        ),
    ]
    sandbox_docker_image: Annotated[
        SandboxDockerImage | None,
        Field(description='The sandbox docker image to use for running this suite.'),
    ]
    allow_network_access: Annotated[
        bool | None,
        Field(
            description='Specifies whether the sandbox should allow commands run inside of it to\n                     make network calls outside of the sandbox.'
        ),
    ]
    deferred: Annotated[
        bool | None,
        Field(
            description='If true, this test suite can be graded asynchronously. Deferred suites that\n                     have yet to be graded do not prevent members of a group from submitting\n                     again.'
        ),
    ]
    normal_fdbk_config: Annotated[
        AGTestSuiteFeedbackConfig | None, Field(description='')
    ]
    ultimate_submission_fdbk_config: Annotated[
        AGTestSuiteFeedbackConfig | None, Field(description='')
    ]
    past_limit_submission_fdbk_config: Annotated[
        AGTestSuiteFeedbackConfig | None, Field(description='')
    ]
    staff_viewer_fdbk_config: Annotated[
        AGTestSuiteFeedbackConfig | None, Field(description='')
    ]
